2023-01-05 16:45:08,602 root INFO Starting
2023-01-05 16:45:17,327 root DEBUG Processing
2023-01-05 16:45:18,984 root DEBUG Computing centrality metrics
2023-01-05 16:45:19,650 root DEBUG Degree for unrestricted/restricted graph with/out weight computed
2023-01-05 16:45:19,693 root DEBUG In degree for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:45:19,726 root DEBUG Out degree for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:45:43,762 root DEBUG Betweenness for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:46:16,550 root DEBUG Current flow betweenness for unrestricted/restricted graphs with weight computed
2023-01-05 16:46:40,642 root DEBUG Closeness for unrestricted and restricted graphs with and without weight computed
2023-01-05 16:46:40,642 root DEBUG Flow betweenness for unrestricted/restricted graphs with weight computed
2023-01-05 16:46:41,350 root DEBUG Pagerank for unrestricted and restricted graphs with and without weight computed
2023-01-05 16:46:41,450 root DEBUG Saving graphs into pickle files
2023-01-05 16:46:41,811 root DEBUG Computing centrality metrics
2023-01-05 16:46:42,8 root DEBUG Degree for unrestricted/restricted graph with/out weight computed
2023-01-05 16:46:42,19 root DEBUG In degree for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:46:42,27 root DEBUG Out degree for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:46:55,784 root DEBUG Betweenness for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:47:44,394 root DEBUG Current flow betweenness for unrestricted/restricted graphs with weight computed
2023-01-05 16:48:18,530 root DEBUG Closeness for unrestricted and restricted graphs with and without weight computed
2023-01-05 16:48:18,530 root DEBUG Flow betweenness for unrestricted/restricted graphs with weight computed
2023-01-05 16:48:19,390 root DEBUG Pagerank for unrestricted and restricted graphs with and without weight computed
2023-01-05 16:48:19,491 root DEBUG Saving graphs into pickle files
2023-01-05 16:48:20,747 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
2023-01-05 16:48:20,747 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,747 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,747 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,747 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:20,747 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,748 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,749 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,750 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,751 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,752 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,753 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,754 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,755 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,756 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,757 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,758 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,759 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,760 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,761 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,767 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,775 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,776 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,777 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,778 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,781 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:20,783 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:20,801 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,801 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,801 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 1.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,803 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,804 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,807 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,808 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,809 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,810 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,811 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,812 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,813 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXGeneral ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf') with score of 0.050000.
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:48:20,814 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 0.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,815 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,816 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,817 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,818 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 10.54
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,819 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,820 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 11.44
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,821 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,822 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,823 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,824 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,825 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,826 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXGeneral ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf') with score of 0.050000.
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0.
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 1.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,827 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,828 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,829 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,830 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.344999999999999
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,831 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,832 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,833 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.344999999999999
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,834 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,835 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,836 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,837 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,838 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,839 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0 to STIXGeneral ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf') with score of 0.050000.
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,840 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 1.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,841 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,842 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,843 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,844 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,845 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,846 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,847 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,848 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,849 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,850 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,851 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXNonUnicode ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf') with score of 0.050000.
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,852 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 0.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,853 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,854 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,855 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 10.54
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,856 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:20,857 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 11.44
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,859 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXNonUnicode ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf') with score of 0.050000.
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0.
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:48:20,864 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 1.05
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,865 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.344999999999999
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,870 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,871 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.344999999999999
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,872 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,873 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:20,874 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,875 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,876 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0 to STIXNonUnicode ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf') with score of 0.050000.
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: Matching STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,877 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,878 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,879 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,880 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,881 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,882 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,883 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,884 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,885 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,886 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,887 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,888 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,889 matplotlib.font_manager DEBUG findfont: Matching STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeOneSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf') with score of 0.050000.
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: Matching STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,890 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,891 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,892 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,893 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,894 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,895 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,896 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,897 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,898 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,899 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,900 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,901 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: Matching STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeTwoSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf') with score of 0.050000.
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: Matching STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,902 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,903 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,904 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,905 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,906 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,907 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,908 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,909 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,910 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,911 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,912 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,913 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: Matching STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeThreeSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf') with score of 0.050000.
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,914 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:20,915 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,916 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,917 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,918 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,919 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,920 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,921 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,922 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,923 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,924 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,925 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,926 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeFourSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf') with score of 0.050000.
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,927 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,928 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,929 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,930 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,931 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,932 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,933 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,934 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,935 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,936 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,937 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,938 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,939 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeFiveSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf') with score of 0.050000.
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: Matching cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,940 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,941 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,942 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,943 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,944 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,945 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,946 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,947 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,948 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,949 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,950 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,951 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: Matching cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmsy10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf') with score of 0.050000.
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: Matching cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,952 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,953 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,954 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,955 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,956 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,957 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,958 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,959 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,960 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,961 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,962 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,963 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: Matching cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmr10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf') with score of 0.050000.
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: Matching cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,964 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,965 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,966 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,967 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,968 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,969 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,970 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,971 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,972 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,973 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,974 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,975 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: Matching cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmtt10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf') with score of 0.050000.
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: Matching cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,976 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,977 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,978 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,979 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,980 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,981 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,982 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,983 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,984 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,985 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,986 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,987 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,988 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: Matching cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmmi10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf') with score of 0.050000.
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: Matching cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,989 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,990 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,991 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,992 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,993 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,994 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,995 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,996 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,997 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,998 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:20,999 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,0 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: Matching cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmb10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf') with score of 0.050000.
2023-01-05 16:48:21,1 matplotlib.font_manager DEBUG findfont: Matching cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,2 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,3 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,4 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,5 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,6 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,7 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,8 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,9 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,10 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,11 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,12 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,13 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: Matching cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmss10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf') with score of 0.050000.
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: Matching cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,14 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,15 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,16 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,17 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,18 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,19 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,20 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: Matching cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmex10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf') with score of 0.050000.
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,37 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 0.15000000000000002
2023-01-05 16:48:21,38 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 0.43499999999999994
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,39 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 10.54
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,44 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 11.44
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,45 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,48 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:48:21,50 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0.
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,51 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,52 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,53 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,54 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.344999999999999
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-01-05 16:48:21,55 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,56 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.344999999999999
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,60 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:48:21,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.050000.
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,63 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,64 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,65 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,70 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,71 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,72 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,73 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,74 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans Mono ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf') with score of 0.050000.
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,75 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,76 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,77 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,78 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,79 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,80 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,81 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,82 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,83 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,84 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,85 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,86 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,87 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans Display ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf') with score of 0.050000.
2023-01-05 16:48:21,144 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,146 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,149 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,151 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,152 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:21,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,157 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:21,159 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:21,574 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:21,574 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:21,581 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:21,581 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:22,294 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:22,314 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:22,730 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:22,730 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:22,734 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:22,734 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:23,442 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:23,442 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:23,447 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:23,447 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:23,447 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:23,447 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:23,504 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:23,512 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:23,512 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:23,512 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:23,512 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:23,513 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:23,513 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:23,537 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:23,543 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:23,543 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,551 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:23,551 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,551 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:23,551 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:23,672 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:23,672 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,673 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:23,673 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,673 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:23,673 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:23,704 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:23,704 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,712 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:23,712 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,712 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:23,712 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:23,817 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:23,817 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,817 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:23,817 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:23,818 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:23,818 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:23,848 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:23,848 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:23,853 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:23,853 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:23,854 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:23,854 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:23,858 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:23,858 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:23,858 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:23,859 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:23,859 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:23,859 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:23,880 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:23,880 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:23,885 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:23,885 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:23,885 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:23,885 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:23,954 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:23,954 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:23,955 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:23,955 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:23,955 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:23,955 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:23,982 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:23,982 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:23,987 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:23,987 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:23,988 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:23,988 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,209 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:24,209 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,210 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:24,210 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,210 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:24,210 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,239 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:24,239 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,244 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:24,244 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,245 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:24,245 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,318 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:24,318 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,318 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:24,318 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,319 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:24,319 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,346 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:24,346 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:24,353 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:24,353 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:24,354 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:24,354 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,449 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:24,449 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:24,450 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:24,450 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:24,450 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:24,450 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,483 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:24,483 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:24,489 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:24,489 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:24,490 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:24,500 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:24,500 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:24,500 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:24,500 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:24,501 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:24,524 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:24,524 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:24,530 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:24,531 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:24,531 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:24,531 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,616 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:24,616 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:24,617 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:24,617 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:24,617 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:24,617 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,648 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:24,648 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:24,651 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:24,651 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:24,652 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:24,652 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:24,695 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:24,695 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:24,695 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:24,695 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:24,695 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:24,695 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:24,717 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:24,717 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,723 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:24,723 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,723 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:24,723 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,797 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:24,797 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,797 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:24,797 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:24,797 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:24,798 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:24,830 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:24,830 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:24,833 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:24,833 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:24,833 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:24,833 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:24,886 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:24,887 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:24,887 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:24,887 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:24,887 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:24,887 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:24,911 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:24,911 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:24,914 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:24,914 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:24,914 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:24,914 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:24,964 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:24,964 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:24,964 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:24,964 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:24,965 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:24,965 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:24,989 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:24,989 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:24,993 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:24,993 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:25,18 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:25,19 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:25,19 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:25,19 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:25,19 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:25,19 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:25,41 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:25,41 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:25,41 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:25,41 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:25,41 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:25,41 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:25,64 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:25,64 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,65 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:25,65 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,65 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:25,65 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:25,112 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:25,112 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,112 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:25,112 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,112 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:25,113 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:25,137 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:25,137 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,137 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:25,137 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,137 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:25,138 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:25,162 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:25,162 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,162 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:25,162 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:25,163 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:25,163 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:25,189 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:25,189 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:25,190 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:25,190 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:25,190 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:25,190 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:25,193 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:25,193 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:25,194 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:25,194 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:25,194 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:25,194 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:25,207 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:25,207 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,208 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:25,208 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,208 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:25,208 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,223 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:25,223 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,223 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:25,223 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,223 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:25,223 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,243 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:25,244 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,244 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:25,244 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,244 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:25,244 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,261 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:25,261 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,261 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:25,261 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,261 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:25,261 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,282 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:25,282 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,283 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:25,283 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,283 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:25,283 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,299 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:25,299 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,300 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:25,300 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,300 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:25,300 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,321 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:25,321 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,322 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:25,322 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,322 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:25,322 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,348 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:25,348 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,349 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:25,349 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:25,349 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:25,349 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,374 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:25,374 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:25,374 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:25,374 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:25,374 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:25,382 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:25,382 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:25,383 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:25,383 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:25,383 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:25,399 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:25,399 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:25,400 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:25,400 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:25,400 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:25,400 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,419 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:25,419 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:25,419 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:25,419 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:25,420 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:25,420 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,443 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:25,443 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:25,443 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:25,443 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:25,443 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:25,443 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:25,450 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:25,450 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:25,450 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:25,450 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:25,451 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:25,451 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:25,468 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:25,468 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,468 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:25,468 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,469 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:25,469 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,485 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:25,485 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,485 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:25,485 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:25,486 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:25,486 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:25,510 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:25,510 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:25,511 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:25,511 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:25,511 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:25,511 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:25,535 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:25,535 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:25,536 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:25,536 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:25,536 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:25,536 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:25,553 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:25,553 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:25,554 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:25,554 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:25,554 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:25,554 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:25,574 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:25,574 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:25,574 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:25,574 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:25,575 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:25,575 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:26,46 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:26,46 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:26,50 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:26,50 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:26,50 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:26,50 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:26,107 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:26,114 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:26,114 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:26,115 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:26,115 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:26,115 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:26,115 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:26,137 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:26,143 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:26,143 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,151 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:26,151 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,151 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:26,151 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:26,270 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:26,270 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,270 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:26,270 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,271 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:26,271 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:26,300 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:26,300 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,309 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:26,309 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,310 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:26,310 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:26,413 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:26,413 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,413 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:26,413 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:26,414 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:26,414 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:26,444 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:26,444 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:26,449 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:26,449 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:26,450 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:26,450 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:26,454 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:26,454 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:26,454 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:26,454 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:26,455 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:26,455 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:26,476 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:26,476 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,482 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:26,482 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,482 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:26,482 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,548 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:26,548 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,548 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:26,548 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,549 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:26,549 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,575 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:26,575 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,581 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:26,581 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,581 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:26,581 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,658 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:26,658 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,658 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:26,658 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,659 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:26,659 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,687 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:26,687 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,693 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:26,693 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,693 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:26,693 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,769 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:26,769 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,769 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:26,769 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:26,770 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:26,770 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,797 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:26,797 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,804 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:26,804 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,805 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:26,805 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,901 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:26,901 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,902 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:26,902 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:26,902 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:26,902 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:26,936 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:26,936 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:26,943 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:26,943 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:26,943 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:26,952 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:26,952 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:26,953 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:26,953 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:26,953 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:26,976 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:26,976 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:26,983 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:26,983 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:26,983 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:26,983 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,66 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:27,66 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:27,67 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:27,67 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:27,67 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:27,67 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,243 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:27,243 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:27,248 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:27,248 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:27,249 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:27,249 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:27,299 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:27,299 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:27,299 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:27,300 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:27,300 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:27,300 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:27,321 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:27,321 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,327 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:27,327 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,327 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:27,327 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,399 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:27,399 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,400 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:27,400 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,400 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:27,400 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,431 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:27,431 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:27,435 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:27,435 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:27,435 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:27,435 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:27,488 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:27,488 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:27,489 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:27,489 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:27,489 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:27,489 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:27,512 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:27,512 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:27,515 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:27,515 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:27,515 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:27,515 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:27,558 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:27,559 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:27,559 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:27,559 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:27,559 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:27,559 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:27,579 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:27,579 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:27,583 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:27,583 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:27,609 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:27,609 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:27,610 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:27,610 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:27,610 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:27,610 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:27,631 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:27,631 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:27,632 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:27,632 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:27,632 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:27,632 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:27,655 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:27,655 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,655 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:27,655 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,656 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:27,656 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:27,704 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:27,704 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,704 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:27,704 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,705 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:27,705 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:27,729 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:27,729 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,729 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:27,729 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,730 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:27,730 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:27,754 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:27,754 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,755 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:27,755 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:27,755 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:27,755 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:27,780 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:27,780 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:27,781 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:27,781 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:27,781 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:27,781 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:27,784 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:27,784 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:27,784 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:27,784 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:27,785 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:27,785 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:27,798 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:27,798 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,798 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:27,799 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,799 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:27,799 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,813 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:27,814 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,814 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:27,814 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,814 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:27,814 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,834 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:27,834 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,835 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:27,835 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,835 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:27,835 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,852 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:27,852 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,852 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:27,852 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,852 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:27,853 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,873 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:27,873 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,874 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:27,874 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,874 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:27,874 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,891 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:27,891 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,891 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:27,891 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:27,892 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:27,892 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,912 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:27,912 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,913 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:27,913 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,913 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:27,913 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,937 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:27,938 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,938 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:27,938 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:27,938 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:27,938 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:27,963 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:27,963 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:27,963 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:27,963 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:27,964 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:27,973 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:27,973 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:27,973 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:27,973 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:27,974 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:27,990 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:27,990 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:27,990 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:27,990 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:27,991 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:27,991 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:28,9 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:28,9 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:28,10 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:28,10 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:28,10 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:28,11 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:28,34 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:28,34 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:28,35 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:28,35 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:28,35 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:28,35 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:28,42 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:28,42 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:28,42 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:28,42 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:28,43 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:28,43 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:28,60 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:28,60 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:28,60 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:28,60 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:28,61 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:28,61 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:28,77 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:28,77 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:28,77 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:28,77 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:28,78 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:28,78 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:28,101 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:28,101 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:28,101 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:28,102 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:28,102 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:28,102 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:28,125 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:28,125 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:28,126 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:28,126 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:28,126 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:28,126 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:28,143 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:28,143 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:28,144 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:28,144 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:28,144 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:28,144 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:28,158 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:28,158 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:28,158 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:28,158 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:28,159 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:48:28,159 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:28,797 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:28,797 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:28,802 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:28,802 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:28,802 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:28,802 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:28,860 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:28,867 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:28,867 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:28,867 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:28,867 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:28,868 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:28,868 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:28,890 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:28,915 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:28,915 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:28,923 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:28,923 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:28,923 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:28,923 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:29,41 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:29,42 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:29,42 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:29,42 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:29,42 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:29,42 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:29,79 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:29,79 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:29,88 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:29,88 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:29,89 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:29,89 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:29,191 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:29,191 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:29,191 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:29,191 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:29,191 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:29,192 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:29,230 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:29,230 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:29,235 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:29,235 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:29,235 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:29,235 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:29,239 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:29,239 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:29,240 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:29,240 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:29,240 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:29,240 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:29,269 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:29,269 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,274 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:29,274 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,275 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:29,275 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,342 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:29,342 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,342 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:29,342 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,343 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:29,343 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,378 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:29,378 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,383 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:29,383 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,384 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:29,384 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,459 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:29,459 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,459 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:29,459 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,460 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:29,460 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,497 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:29,497 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,503 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:29,503 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,503 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:29,503 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,577 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:29,577 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,578 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:29,578 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:29,578 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:29,578 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,614 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:29,614 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,621 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:29,621 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,621 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:29,621 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,722 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:29,722 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,722 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:29,722 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:29,723 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:29,723 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,763 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:29,763 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:29,770 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:29,770 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:29,771 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:29,780 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:29,780 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:29,780 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:29,780 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:29,780 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:29,811 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:29,811 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:29,817 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:29,817 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:29,817 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:29,818 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,901 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:29,902 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:29,902 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:29,902 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:29,902 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:29,902 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:29,940 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:29,940 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:29,944 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:29,944 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:29,944 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:29,944 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:30,147 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:30,147 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:30,148 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:30,148 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:30,148 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:30,148 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:30,190 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:30,190 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,196 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:30,197 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,197 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:30,197 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,271 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:30,271 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,272 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:30,272 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,272 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:30,272 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,312 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:30,312 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:30,314 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:30,315 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:30,315 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:30,315 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:30,367 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:30,367 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:30,368 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:30,368 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:30,368 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:30,368 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:30,400 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:30,400 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:30,403 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:30,403 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:30,403 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:30,403 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:30,451 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:30,451 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:30,452 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:30,452 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:30,452 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:30,452 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:30,479 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:30,479 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:30,483 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:30,483 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:30,515 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:30,515 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:30,516 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:30,516 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:30,516 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:30,516 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:30,536 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:30,536 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:30,536 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:30,536 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:30,536 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:30,536 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:30,579 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:30,579 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,579 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:30,579 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,580 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:30,580 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:30,626 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:30,626 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,627 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:30,627 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,627 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:48:30,627 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:30,661 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:30,661 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,662 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:30,662 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,662 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:30,662 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:30,686 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:30,686 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,686 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:30,686 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:48:30,687 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:48:30,687 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:48:30,718 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:30,718 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:30,719 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:30,719 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:30,719 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:30,719 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:30,722 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:30,722 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:30,722 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:30,723 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:48:30,723 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:48:30,723 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:48:30,744 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:30,744 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,745 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:30,745 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,745 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:30,745 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,760 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:30,760 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,761 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:30,761 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,761 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:48:30,761 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,788 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:30,788 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,788 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:30,788 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,789 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:30,789 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,805 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:30,805 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,806 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:30,806 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,806 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:48:30,806 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,833 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:30,833 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,833 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:30,833 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,834 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:30,834 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,850 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:30,850 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,852 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:30,852 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:30,853 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:48:30,853 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,880 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:30,880 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,880 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:30,880 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,880 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:30,881 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,905 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:30,905 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,906 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:30,906 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:48:30,906 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:48:30,906 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,938 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:30,938 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:30,939 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:30,939 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:30,939 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:30,947 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:30,947 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:30,947 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:30,947 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:48:30,947 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:48:30,970 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:30,970 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:30,970 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:30,970 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:30,971 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:30,971 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:30,989 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:30,989 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:30,990 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:30,990 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:48:30,990 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:48:30,990 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:31,22 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:31,22 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,22 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:31,23 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,23 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:31,23 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:31,29 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:31,30 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,30 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:31,30 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,30 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:48:31,30 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:31,53 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:31,53 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:31,54 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:31,54 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:31,54 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:31,54 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:31,70 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:31,70 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:31,70 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:31,70 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:48:31,71 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:48:31,71 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:48:31,102 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:31,102 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:31,103 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:31,103 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:31,103 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:31,103 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:31,127 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:31,127 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:31,127 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:31,127 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:48:31,128 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:48:31,128 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:48:31,151 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:31,151 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:31,151 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:31,152 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:31,152 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:31,152 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:31,171 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:31,171 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:31,171 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:31,172 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:48:31,172 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:48:31,172 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:48:31,245 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,245 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,249 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,249 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,250 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,250 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,308 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:31,315 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,315 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,316 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,316 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,316 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,316 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,343 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:31,354 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:31,354 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:31,358 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:31,358 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:31,370 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,370 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,371 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,371 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,371 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,371 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,393 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,393 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,393 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,394 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,394 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,394 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,491 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,491 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,495 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,495 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,496 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,496 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,557 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:31,564 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,564 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,565 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,565 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,565 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,565 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,593 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:31,604 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:31,604 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:31,608 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:31,608 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:31,621 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,621 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,622 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,622 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,622 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,622 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,822 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,822 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,823 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,823 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:48:31,823 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:48:31,823 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:48:31,917 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:31,917 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,921 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:31,921 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,921 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:31,921 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:31,968 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:31,972 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:31,972 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,973 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:31,973 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:31,973 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:31,973 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:31,994 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:32,0 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:32,0 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:32,4 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:32,4 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:32,16 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,16 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,16 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,16 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,17 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,17 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:32,32 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,32 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,33 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,33 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,33 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,33 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:32,118 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,118 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,122 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,122 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,123 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,123 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:32,173 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:32,177 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,177 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,178 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,178 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,178 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,178 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:32,201 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:48:32,207 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:48:32,207 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:32,211 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:32,211 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:32,224 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,224 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,224 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,224 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,225 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,225 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:32,240 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,240 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,240 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,240 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:48:32,240 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:48:32,240 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=6.0.
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,493 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,494 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,495 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,496 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:32,497 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,498 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,499 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,500 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,501 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,502 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,503 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,504 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,505 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,506 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=6.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:32,596 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=3.0.
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,597 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,598 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,599 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,600 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,601 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,602 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,603 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,604 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,605 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,606 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,607 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,608 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,609 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,610 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:32,610 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,610 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,610 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,610 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,610 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=3.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:32,686 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0.
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,687 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,688 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,689 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,690 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:32,691 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,692 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,693 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,694 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,695 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,696 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,697 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,698 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,699 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:32,700 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:32,780 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:32,897 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:32,897 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:33,400 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:33,539 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:33,540 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:34,229 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:34,347 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:34,347 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:34,998 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:35,132 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:35,132 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:35,416 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff370f81700>
2023-01-05 16:48:35,416 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff370f81700> on colorbar
2023-01-05 16:48:35,416 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:48:35,428 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:35,492 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:35,492 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:35,735 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36de63c70>
2023-01-05 16:48:35,736 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36de63c70> on colorbar
2023-01-05 16:48:35,736 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:48:35,748 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:35,809 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:35,809 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:36,42 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,43 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,43 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,44 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,44 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,44 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,45 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,45 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,46 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,46 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,46 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,47 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,62 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,63 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,63 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,64 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,64 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,65 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,65 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,65 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,66 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,66 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,66 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,67 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,201 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,202 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,203 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,203 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,204 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,204 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,205 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,205 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,206 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,206 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,207 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,207 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,228 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,228 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,229 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,229 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,230 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,230 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,231 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,231 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,232 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,232 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,232 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,233 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,249 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,249 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,250 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,250 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,250 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,251 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,251 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,252 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,252 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,252 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,253 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,253 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,266 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,267 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,267 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,267 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,268 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,268 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,268 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,269 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,269 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,269 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,270 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,270 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,283 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,283 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,284 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,285 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,285 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,285 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,285 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,286 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,286 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,286 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,287 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,287 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,300 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,300 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,301 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,301 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,301 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,302 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,302 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,302 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,303 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,303 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,303 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,303 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,316 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,317 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,317 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,317 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,318 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,318 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,318 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,319 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,319 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,319 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,319 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,320 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,333 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,333 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,334 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,334 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,334 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,335 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,335 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,335 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,336 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,336 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,336 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,337 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,349 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,350 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,350 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,350 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,351 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,351 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,351 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,352 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,352 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,352 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,353 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,353 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,366 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,367 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,367 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,368 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,368 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,368 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,368 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,369 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,369 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,369 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,370 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,370 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,383 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,383 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,384 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,384 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,384 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,385 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,385 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,385 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,386 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,386 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,386 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,387 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,401 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,402 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,403 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,403 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,403 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,404 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,404 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,405 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,405 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,405 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,406 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,406 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:48:36,413 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:36,761 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:36,762 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:37,502 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36ef419d0>
2023-01-05 16:48:37,502 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36ef419d0> on colorbar
2023-01-05 16:48:37,502 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:48:37,779 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,780 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:37,782 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,783 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,784 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,785 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,786 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,787 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,788 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,789 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,790 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,791 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,792 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:48:37,793 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:48:38,337 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:38,534 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:38,534 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:40,107 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36dde5f10>
2023-01-05 16:48:40,107 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36dde5f10> on colorbar
2023-01-05 16:48:40,107 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:48:40,718 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:40,916 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:40,916 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:48:42,479 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36e3bb4f0>
2023-01-05 16:48:42,479 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7ff36e3bb4f0> on colorbar
2023-01-05 16:48:42,479 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:48:43,194 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:48:43,387 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:48:43,387 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
