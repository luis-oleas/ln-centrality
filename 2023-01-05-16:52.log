2023-01-05 16:52:36,669 root INFO Starting
2023-01-05 16:52:39,706 root DEBUG Loading /home/pis1901/PycharmProjects/ln-centrality/ln/data/snapshot/lngraph_2018_10_12__12_00.json
2023-01-05 16:52:39,754 root DEBUG Processing
2023-01-05 16:52:40,467 root DEBUG Computing centrality metrics
2023-01-05 16:52:40,802 root DEBUG Degree for unrestricted/restricted graph with/out weight computed
2023-01-05 16:52:40,814 root DEBUG In degree for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:52:40,823 root DEBUG Out degree for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:52:52,277 root DEBUG Betweenness for unrestricted/restricted graphs with/out weight computed
2023-01-05 16:53:27,795 root DEBUG Current flow betweenness for unrestricted/restricted graphs with weight computed
2023-01-05 16:53:53,772 root DEBUG Closeness for unrestricted and restricted graphs with and without weight computed
2023-01-05 16:53:53,772 root DEBUG Flow betweenness for unrestricted/restricted graphs with weight computed
2023-01-05 16:53:54,568 root DEBUG Pagerank for unrestricted and restricted graphs with and without weight computed
2023-01-05 16:53:54,695 root DEBUG Saving graphs into pickle files
2023-01-05 16:53:56,36 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,37 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,38 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,39 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,40 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,41 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,42 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,43 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,44 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,45 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,46 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,47 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,48 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,49 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,50 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:53:56,55 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,56 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,57 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,58 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,59 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,60 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,61 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,62 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,63 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,64 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,65 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,66 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,67 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,68 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,69 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:53:56,71 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:53:56,89 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,89 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,89 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,89 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 1.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,90 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,91 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,92 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,93 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,94 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,95 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,96 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,97 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,98 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,99 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,100 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,101 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXGeneral ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf') with score of 0.050000.
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 0.05
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,102 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,103 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,104 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,105 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 10.54
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,106 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,107 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,108 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 11.44
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,109 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,110 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,111 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,112 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXGeneral ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf') with score of 0.050000.
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0.
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,114 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 1.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,115 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.344999999999999
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,120 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.344999999999999
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,121 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,123 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: Matching STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0 to STIXGeneral ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf') with score of 0.050000.
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,126 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 1.335
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,127 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,128 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,129 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,130 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,131 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,132 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,133 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,134 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,135 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,136 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,137 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,138 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXNonUnicode ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf') with score of 0.050000.
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,139 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 0.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,140 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,141 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,142 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 10.54
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,143 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,144 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,145 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 11.44
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,146 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,147 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,148 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,149 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,150 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,151 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXNonUnicode ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf') with score of 0.050000.
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0.
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,152 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 1.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,153 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,154 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,155 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.344999999999999
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.344999999999999
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,159 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,161 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,163 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,164 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0 to STIXNonUnicode ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf') with score of 0.050000.
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: Matching STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,165 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,169 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,170 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,171 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,172 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,173 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,174 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,175 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,176 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: Matching STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeOneSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf') with score of 0.050000.
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: Matching STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,177 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,178 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,179 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,180 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,181 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,182 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,183 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,184 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,185 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,186 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,187 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,188 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: Matching STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeTwoSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf') with score of 0.050000.
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: Matching STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,189 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,190 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,191 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,192 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,193 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,194 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,195 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,196 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,197 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,198 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,199 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,200 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: Matching STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeThreeSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf') with score of 0.050000.
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,201 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,202 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,203 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,204 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,205 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,206 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,207 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,208 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,209 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,210 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,211 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,212 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeFourSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf') with score of 0.050000.
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,213 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,214 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,215 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,216 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,217 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,218 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,219 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,220 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,221 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,222 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,223 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,224 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: Matching STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to STIXSizeFiveSym ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf') with score of 0.050000.
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: Matching cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,225 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,226 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,227 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,228 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,229 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,230 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,231 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,232 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,233 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,234 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,235 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,236 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: Matching cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmsy10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf') with score of 0.050000.
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: Matching cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,237 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,238 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,239 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,240 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,241 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,242 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,243 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,244 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,245 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,246 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,247 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,248 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: Matching cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmr10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf') with score of 0.050000.
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: Matching cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,249 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,250 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,251 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,252 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,253 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,254 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,255 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,256 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,257 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,258 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,259 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,260 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: Matching cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmtt10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf') with score of 0.050000.
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: Matching cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,261 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,262 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,263 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,264 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,265 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,266 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,267 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,268 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,269 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,270 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,271 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,272 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: Matching cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmmi10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf') with score of 0.050000.
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: Matching cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,273 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,274 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,275 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,276 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,277 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,278 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,279 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,280 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,281 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,282 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,283 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,284 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: Matching cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmb10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf') with score of 0.050000.
2023-01-05 16:53:56,285 matplotlib.font_manager DEBUG findfont: Matching cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,286 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,287 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,288 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,289 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,290 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,291 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,292 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,293 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,294 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,295 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,296 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,297 matplotlib.font_manager DEBUG findfont: Matching cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmss10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf') with score of 0.050000.
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: Matching cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,298 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,299 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,300 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,301 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,302 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,303 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,304 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,305 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,306 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,307 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,308 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,309 matplotlib.font_manager DEBUG findfont: Matching cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to cmex10 ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf') with score of 0.050000.
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,310 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,311 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,312 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,313 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,314 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,315 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,316 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,317 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,318 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,319 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,320 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,321 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 0.15000000000000002
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 0.43499999999999994
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,322 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,323 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,324 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,325 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 10.54
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,326 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,327 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,328 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 11.44
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,329 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,330 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,331 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,332 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 10.35
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 11.25
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,333 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 11.05
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 10.05
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0.
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,334 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,335 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,336 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,337 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.344999999999999
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,338 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,339 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,340 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.344999999999999
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,341 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,342 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,343 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,344 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.535
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.535
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,345 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.050000.
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,346 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,347 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,348 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,349 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,350 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,351 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,352 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,353 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,354 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,355 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,356 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,357 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans Mono ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf') with score of 0.050000.
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,358 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,359 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,360 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,361 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,362 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,363 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,364 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,365 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,366 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,367 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,368 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,369 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,370 matplotlib.font_manager DEBUG findfont: Matching DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans Display ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf') with score of 0.050000.
2023-01-05 16:53:56,426 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:53:56,427 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,428 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,429 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,430 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,431 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,432 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,433 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,434 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:53:56,435 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:53:56,436 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,437 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,438 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,439 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:53:56,440 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:53:56,441 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:53:56,862 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:53:56,862 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:53:56,869 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:53:56,869 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:53:57,537 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:53:57,556 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:53:57,972 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:53:57,972 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:53:57,976 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:53:57,976 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:53:58,664 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:53:58,664 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:53:58,669 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:53:58,669 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:53:58,669 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:53:58,669 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:53:58,724 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:53:58,732 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:53:58,732 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:53:58,733 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:53:58,733 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:53:58,733 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:53:58,733 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:53:58,759 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:53:58,765 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:53:58,765 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:58,773 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:53:58,773 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:58,773 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:53:58,773 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:53:58,889 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:53:58,889 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:58,890 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:53:58,890 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:58,890 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:53:58,890 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:53:58,921 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:53:58,921 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:58,929 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:53:58,929 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:58,930 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:53:58,930 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:53:59,167 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:53:59,167 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:59,168 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:53:59,168 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:53:59,168 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:53:59,168 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:53:59,201 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:53:59,201 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:53:59,206 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:53:59,206 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:53:59,206 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:53:59,206 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:53:59,210 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:53:59,210 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:53:59,211 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:53:59,211 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:53:59,211 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:53:59,211 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:53:59,233 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:53:59,233 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,238 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:53:59,238 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,238 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:53:59,238 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,304 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:53:59,304 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,304 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:53:59,304 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,305 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:53:59,305 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,332 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:53:59,332 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,337 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:53:59,337 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,338 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:53:59,338 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,412 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:53:59,412 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,413 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:53:59,413 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,413 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:53:59,413 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,441 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:53:59,441 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,446 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:53:59,446 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,447 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:53:59,447 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,521 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:53:59,521 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,522 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:53:59,522 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,522 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:53:59,522 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,550 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:53:59,550 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,558 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:53:59,558 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,559 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:53:59,559 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,655 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:53:59,655 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,655 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:53:59,655 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:53:59,655 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:53:59,656 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,688 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:53:59,688 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:53:59,695 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:53:59,695 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:53:59,695 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:53:59,705 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:53:59,705 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:53:59,706 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:53:59,706 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:53:59,706 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:53:59,729 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:53:59,729 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:53:59,736 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:53:59,736 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:53:59,736 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:53:59,736 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,822 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:53:59,823 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:53:59,823 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:53:59,823 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:53:59,823 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:53:59,823 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:53:59,854 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:53:59,854 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:53:59,858 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:53:59,858 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:53:59,858 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:53:59,858 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:53:59,901 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:53:59,901 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:53:59,901 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:53:59,902 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:53:59,902 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:53:59,902 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:53:59,923 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:53:59,923 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,929 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:53:59,929 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:53:59,929 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:53:59,930 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,3 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,3 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,4 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,4 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,4 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,4 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,37 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,38 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,40 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,40 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,41 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,41 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:00,93 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,93 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,94 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,94 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,94 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,94 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:00,118 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,118 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,120 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,121 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,121 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,121 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:00,170 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,170 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,171 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,171 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,171 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,171 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:00,196 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:54:00,196 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:00,200 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:00,200 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:00,221 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:00,221 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:00,221 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:00,221 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:00,221 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:00,221 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:00,243 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:00,243 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:00,243 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:00,243 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:00,243 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:00,243 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:00,266 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:00,267 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,267 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:00,267 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,267 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:00,268 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:00,315 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:00,315 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,316 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:00,316 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,317 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:00,317 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:00,341 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:00,341 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,341 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:00,341 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,342 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:00,342 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:00,365 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:00,365 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,366 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:00,366 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:00,366 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:00,366 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:00,392 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:00,392 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:00,393 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:00,393 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:00,393 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:00,393 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:00,396 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:00,396 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:00,396 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:00,397 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:00,397 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:00,397 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:00,410 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:00,410 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,411 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:00,411 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,411 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:00,411 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,426 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:00,426 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,426 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:00,427 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,427 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:00,427 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,447 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:00,447 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,447 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:00,447 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,448 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:00,448 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,464 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:00,464 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,464 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:00,465 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,465 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:00,465 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,486 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:00,486 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,487 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:00,487 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,487 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:00,487 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,504 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:00,504 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,504 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:00,504 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,505 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:00,505 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,526 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:00,526 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,526 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:00,526 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,527 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:00,527 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,552 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:00,552 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,552 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:00,552 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:00,553 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:00,553 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,578 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:00,578 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:00,578 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:00,578 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:00,578 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:00,586 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:00,586 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:00,587 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:00,587 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:00,587 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:00,603 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:00,603 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:00,604 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:00,604 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:00,604 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:00,604 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,623 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:00,623 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:00,624 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:00,624 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:00,624 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:00,624 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,648 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:00,648 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:00,648 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:00,648 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:00,648 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:00,648 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:00,655 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:00,655 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:00,656 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:00,656 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:00,656 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:00,656 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:00,673 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,673 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,674 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,674 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,674 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,674 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,691 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,691 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,691 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,691 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:00,692 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:00,692 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:00,716 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,716 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,716 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,716 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,717 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,717 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:00,741 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,741 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,741 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,741 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:00,742 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:00,742 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:00,759 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,760 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,760 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,760 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,760 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,761 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:00,783 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,783 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,783 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,783 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:00,784 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:00,784 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:01,214 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:01,215 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:01,219 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:01,219 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:01,219 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:01,219 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:01,275 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:01,282 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:01,282 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:01,283 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:01,283 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:01,283 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:01,283 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:01,306 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:54:01,313 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:01,313 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,320 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:01,321 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,321 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:01,321 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:01,435 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:01,435 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,435 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:01,435 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,436 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:01,436 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:01,465 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:01,465 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,475 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:01,475 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,475 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:01,475 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:01,577 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:01,577 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,577 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:01,577 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:01,577 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:01,577 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:01,609 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:01,609 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:01,614 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:01,614 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:01,614 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:01,614 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:01,618 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:01,618 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:01,619 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:01,619 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:01,619 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:01,619 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:01,640 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:01,640 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:01,645 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:01,645 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:01,645 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:01,645 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:01,711 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:01,711 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:01,712 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:01,712 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:01,712 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:01,712 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:01,739 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:01,739 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:01,745 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:01,745 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:01,745 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:01,745 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:01,960 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:01,960 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:01,961 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:01,961 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:01,961 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:01,961 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:01,990 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:01,990 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:01,995 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:01,996 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:01,996 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:01,996 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,69 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:02,69 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,70 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:02,70 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,70 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:02,70 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,98 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:02,98 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,105 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:02,105 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,105 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:02,105 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,201 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:02,201 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,201 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:02,202 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,202 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:02,202 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,234 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:02,234 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:02,240 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:02,240 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:02,240 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:02,249 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:02,249 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:02,250 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:02,250 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:02,250 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:02,274 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:02,274 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:02,281 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:02,281 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:02,281 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:02,281 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,363 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:02,363 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:02,382 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:02,382 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:02,383 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:02,383 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,413 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:02,414 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:02,417 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:02,417 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:02,417 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:02,417 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:02,459 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:02,459 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:02,460 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:02,460 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:02,460 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:02,460 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:02,482 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:02,482 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,487 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:02,487 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,488 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:02,488 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,562 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:02,562 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,562 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:02,562 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,563 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:02,563 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,595 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:02,595 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:02,598 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:02,598 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:02,598 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:02,598 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:02,651 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:02,651 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:02,651 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:02,651 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:02,652 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:02,652 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:02,676 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:02,676 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:02,679 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:02,679 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:02,679 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:02,679 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:02,724 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:02,724 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:02,724 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:02,725 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:02,725 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:02,725 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:02,745 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:54:02,745 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:02,748 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:02,748 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:02,769 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:02,769 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:02,769 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:02,770 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:02,770 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:02,770 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:02,792 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:02,792 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:02,792 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:02,792 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:02,793 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:02,793 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:02,817 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:02,817 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,817 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:02,817 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,817 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:02,817 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:02,864 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:02,864 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,865 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:02,865 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,865 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:02,865 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:02,890 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:02,890 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,890 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:02,890 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,891 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:02,891 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:02,914 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:02,914 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,915 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:02,915 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:02,915 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:02,915 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:02,940 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:02,940 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:02,940 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:02,941 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:02,941 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:02,941 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:02,944 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:02,944 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:02,944 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:02,944 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:02,944 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:02,944 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:02,958 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:02,958 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,959 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:02,959 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,959 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:02,959 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,974 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:02,974 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,974 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:02,974 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:02,974 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:02,974 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:02,995 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:02,995 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,995 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:02,995 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:02,996 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:02,996 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,13 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:03,13 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,13 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:03,13 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,13 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:03,13 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,35 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:03,35 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,35 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:03,35 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,36 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:03,36 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,52 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:03,52 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,53 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:03,53 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,53 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:03,53 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,74 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:03,75 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:03,75 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:03,75 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:03,75 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:03,75 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,100 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:03,100 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:03,101 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:03,101 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:03,101 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:03,101 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,127 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:03,127 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:03,128 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:03,128 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:03,128 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:03,136 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:03,136 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:03,136 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:03,136 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:03,137 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:03,153 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:03,153 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:03,154 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:03,154 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:03,154 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:03,154 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,173 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:03,173 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:03,173 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:03,173 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:03,174 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:03,174 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,197 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:03,197 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:03,198 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:03,198 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:03,198 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:03,198 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:03,205 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:03,205 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:03,205 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:03,205 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:03,205 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:03,205 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:03,222 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:03,222 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,223 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:03,223 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,223 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:03,223 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,240 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:03,240 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,240 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:03,240 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:03,241 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:03,241 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:03,264 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:03,264 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:03,265 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:03,265 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:03,265 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:03,265 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:03,289 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:03,289 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:03,290 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:03,290 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:03,290 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:03,290 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:03,307 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:03,308 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:03,308 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:03,308 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:03,308 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:03,309 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:03,322 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:03,322 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:03,323 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:03,323 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:03,323 matplotlib.ticker DEBUG vmin 0.0003710217466768338 vmax 0.0019405870584376617
2023-01-05 16:54:03,323 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:04,0 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:04,0 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:04,5 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:04,5 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:04,5 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:04,5 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:04,64 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:04,71 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:04,71 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:04,72 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:04,72 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:04,72 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:04,72 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:04,94 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:54:04,119 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:04,119 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,127 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:04,127 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,128 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:04,128 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:04,240 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:04,240 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,241 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:04,241 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,241 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:04,241 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:04,279 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:04,279 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,287 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:04,287 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,287 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:04,287 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:04,389 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:04,389 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,390 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:04,390 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:04,390 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:04,390 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:04,430 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:04,430 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:04,435 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:04,435 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:04,435 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:04,435 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:04,439 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:04,439 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:04,440 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:04,440 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:04,440 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:04,440 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:04,468 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:04,468 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,473 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:04,473 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,473 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:04,474 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,539 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:04,539 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,540 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:04,540 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,540 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:04,540 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,575 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:04,575 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,581 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:04,581 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,581 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:04,581 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,655 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:04,655 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,655 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:04,655 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,656 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:04,656 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,692 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:04,692 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,697 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:04,698 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,698 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:04,698 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,772 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:04,772 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,773 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:04,773 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:04,773 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:04,773 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,811 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:04,811 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,818 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:04,818 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,818 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:04,819 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,916 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:04,916 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,917 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:04,917 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:04,917 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:04,917 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:04,959 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:04,959 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:04,965 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:04,965 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:04,965 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:04,974 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:04,974 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:04,975 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:04,975 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:04,975 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:05,7 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:05,8 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:05,14 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:05,15 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:05,15 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:05,15 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:05,98 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:05,98 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:05,98 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:05,99 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:05,99 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:05,99 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:05,137 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:05,137 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:05,140 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:05,140 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:05,141 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:05,141 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:05,185 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:05,185 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:05,186 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:05,186 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:05,186 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:05,186 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:05,215 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:05,215 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,221 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:05,221 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,221 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:05,221 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:05,295 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:05,295 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,296 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:05,296 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,296 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:05,296 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:05,485 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:05,485 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:05,490 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:05,490 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:05,491 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:05,491 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:05,560 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:05,560 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:05,561 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:05,561 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:05,561 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:05,561 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:05,592 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:05,592 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:05,595 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:05,595 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:05,596 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:05,596 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:05,644 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:05,644 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:05,644 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:05,645 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:05,645 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:05,645 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:05,671 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:54:05,671 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:05,676 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:05,676 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:05,708 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:05,708 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:05,708 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:05,708 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:05,709 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:05,709 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:05,730 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:05,730 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:05,731 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:05,731 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:05,731 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:05,731 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:05,772 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:05,772 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,773 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:05,773 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,773 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:05,773 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:05,819 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:05,819 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,820 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:05,820 matplotlib.ticker DEBUG ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
       1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,820 matplotlib.ticker DEBUG vmin 517.258807923302 vmax 3008145183.0603094
2023-01-05 16:54:05,820 matplotlib.ticker DEBUG ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:05,854 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:05,854 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,855 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:05,855 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,855 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:05,855 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:05,879 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:05,879 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,880 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:05,880 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,
       1.e+08, 1.e+09, 1.e+10, 1.e+11])
2023-01-05 16:54:05,880 matplotlib.ticker DEBUG vmin 17.130866446447882 vmax 1241810818.8807402
2023-01-05 16:54:05,880 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07,
       2.e+08, 3.e+08, 4.e+08, 5.e+08, 6.e+08, 7.e+08, 8.e+08, 9.e+08,
       2.e+09, 3.e+09, 4.e+09, 5.e+09, 6.e+09, 7.e+09, 8.e+09, 9.e+09,
       2.e+10, 3.e+10, 4.e+10, 5.e+10, 6.e+10, 7.e+10, 8.e+10, 9.e+10,
       2.e+11, 3.e+11, 4.e+11, 5.e+11, 6.e+11, 7.e+11, 8.e+11, 9.e+11])
2023-01-05 16:54:05,911 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:05,911 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:05,911 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:05,911 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:05,912 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:05,912 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:05,915 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:05,915 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:05,915 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:05,915 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06, 1.e+08, 1.e+10, 1.e+12])
2023-01-05 16:54:05,915 matplotlib.ticker DEBUG vmin 8.089033763910479 vmax 1166137091.315567
2023-01-05 16:54:05,915 matplotlib.ticker DEBUG ticklocs array([], dtype=float64)
2023-01-05 16:54:05,937 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:05,937 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:05,937 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:05,937 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:05,938 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:05,938 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:05,952 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:05,952 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:05,953 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:05,953 matplotlib.ticker DEBUG ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:05,953 matplotlib.ticker DEBUG vmin 19.837420052765772 vmax 968037.7208314987
2023-01-05 16:54:05,953 matplotlib.ticker DEBUG ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:05,979 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:05,979 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,980 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:05,980 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,980 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:05,980 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:05,997 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:05,997 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,998 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:05,998 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:05,998 matplotlib.ticker DEBUG vmin 3.610115545381027 vmax 621971.6566373814
2023-01-05 16:54:05,998 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,26 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:06,26 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,26 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:06,26 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,26 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:06,27 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,43 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:06,43 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,46 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:06,46 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,46 matplotlib.ticker DEBUG vmin 2.48073129816618 vmax 602722.8840066531
2023-01-05 16:54:06,46 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,73 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:06,73 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:06,74 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:06,74 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:06,74 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:06,74 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,99 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:06,99 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:06,100 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:06,100 matplotlib.ticker DEBUG ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05, 1.e+06, 1.e+07])
2023-01-05 16:54:06,100 matplotlib.ticker DEBUG vmin 0.021415515450674848 vmax 218810.27989043036
2023-01-05 16:54:06,100 matplotlib.ticker DEBUG ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,133 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:06,133 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:06,134 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:06,134 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:06,134 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:06,141 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:06,141 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:06,142 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:06,142 matplotlib.ticker DEBUG ticklocs array([1.e-07, 1.e-05, 1.e-03, 1.e-01, 1.e+01, 1.e+03, 1.e+05, 1.e+07,
       1.e+09, 1.e+11])
2023-01-05 16:54:06,142 matplotlib.ticker DEBUG vmin 2.8902216200337566e-05 vmax 20914425.836415272
2023-01-05 16:54:06,165 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:06,165 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:06,165 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:06,165 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:06,165 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:06,166 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,185 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:06,185 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:06,185 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:06,185 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,
       1.e+06, 1.e+07])
2023-01-05 16:54:06,185 matplotlib.ticker DEBUG vmin 0.10112483143090806 vmax 331623.9442427406
2023-01-05 16:54:06,185 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,216 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:06,216 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:06,217 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:06,217 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:06,217 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:06,217 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:06,224 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:06,224 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:06,225 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:06,225 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:06,225 matplotlib.ticker DEBUG vmin 0.8912509381337456 vmax 11.220184543019636
2023-01-05 16:54:06,225 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:06,248 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:06,248 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,248 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:06,249 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,249 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:06,249 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,265 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:06,265 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,266 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:06,266 matplotlib.ticker DEBUG ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06,
       1.e+07])
2023-01-05 16:54:06,266 matplotlib.ticker DEBUG vmin 2.365720205138374 vmax 441108.2063644346
2023-01-05 16:54:06,266 matplotlib.ticker DEBUG ticklocs array([2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06,
       2.e+07, 3.e+07, 4.e+07, 5.e+07, 6.e+07, 7.e+07, 8.e+07, 9.e+07])
2023-01-05 16:54:06,298 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:06,298 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:06,299 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:06,299 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:06,299 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:06,299 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:06,323 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:06,323 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:06,323 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:06,323 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02])
2023-01-05 16:54:06,324 matplotlib.ticker DEBUG vmin 0.16858458920638114 vmax 1.0884743431403412
2023-01-05 16:54:06,324 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02])
2023-01-05 16:54:06,347 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:06,347 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:06,348 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:06,348 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:06,348 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:06,348 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:06,368 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:06,368 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:06,369 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:06,369 matplotlib.ticker DEBUG ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01])
2023-01-05 16:54:06,369 matplotlib.ticker DEBUG vmin 0.0002742923480285484 vmax 0.001968702385907597
2023-01-05 16:54:06,369 matplotlib.ticker DEBUG ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01])
2023-01-05 16:54:06,438 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,438 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,442 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,443 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,443 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,443 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:06,500 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:06,508 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,508 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,508 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,508 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,508 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,508 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:06,535 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:54:06,546 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:54:06,546 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:06,550 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:06,550 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:06,562 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,563 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,563 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,563 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,563 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,563 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:06,585 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,585 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,585 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,585 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,586 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,586 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:06,678 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,679 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,683 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,683 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,683 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,684 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:06,745 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:06,753 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,753 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,753 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,753 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,754 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,754 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:06,782 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:54:06,793 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:54:06,793 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:06,797 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:06,797 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:06,809 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,809 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,809 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,809 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,810 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,810 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:06,832 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,832 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,833 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,833 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2023-01-05 16:54:06,833 matplotlib.ticker DEBUG vmin 0.740129831111678 vmax 555.3079780376862
2023-01-05 16:54:06,833 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-01-05 16:54:07,125 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,125 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,129 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,129 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,129 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,129 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,176 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:07,180 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,180 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,180 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,180 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,181 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,181 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,201 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:54:07,207 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:54:07,208 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:07,212 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:07,212 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:07,223 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,223 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,224 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,224 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,224 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,224 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,240 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,240 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,240 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,240 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,241 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,241 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,322 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,322 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,326 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,326 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,326 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,326 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,377 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:07,382 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,382 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,382 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,382 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,383 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,383 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,406 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F2' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf'
2023-01-05 16:54:07,412 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf.
2023-01-05 16:54:07,412 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:07,416 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:07,416 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:07,428 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,429 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,429 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,429 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,429 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,429 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,444 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,444 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,445 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,445 matplotlib.ticker DEBUG ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2023-01-05 16:54:07,445 matplotlib.ticker DEBUG vmin 0.8348143654846168 vmax 44.321230598998106
2023-01-05 16:54:07,445 matplotlib.ticker DEBUG ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2023-01-05 16:54:07,664 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=6.0.
2023-01-05 16:54:07,664 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,664 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:07,664 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,665 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,666 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,667 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,668 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,669 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,670 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,671 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,672 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,673 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,674 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,675 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,676 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,677 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:07,678 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,678 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,678 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,678 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,678 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=6.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=3.0.
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,768 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,769 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,770 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,771 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:54:07,772 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,773 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,774 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,775 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,776 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,777 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,778 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,779 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,780 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,781 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=3.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0.
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,857 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,858 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,859 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,860 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,861 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,862 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,863 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,864 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,865 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,866 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,867 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,868 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,869 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:07,870 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:54:07,947 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:08,64 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:08,65 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:08,550 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:08,801 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:08,801 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:09,336 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:09,454 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:09,454 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:10,72 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:10,208 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:10,209 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:10,479 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc6d2dcd0>
2023-01-05 16:54:10,479 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc6d2dcd0> on colorbar
2023-01-05 16:54:10,479 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:54:10,491 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:10,553 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:10,553 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:10,810 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc6f1ea60>
2023-01-05 16:54:10,810 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc6f1ea60> on colorbar
2023-01-05 16:54:10,810 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:54:10,822 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:10,883 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:10,883 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:11,222 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,223 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,223 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,224 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,224 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,225 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,225 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,225 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,226 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,226 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,226 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,227 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,241 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,241 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,242 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,242 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,242 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,243 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,243 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,243 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,244 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,244 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,244 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,245 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,258 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,259 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,259 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,259 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,260 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,260 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,260 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,261 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,261 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,261 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,262 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,262 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,275 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,276 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,276 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,276 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,277 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,277 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,277 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,278 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,278 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,278 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,279 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,279 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,292 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,293 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,293 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,293 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,294 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,294 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,294 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,295 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,295 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,295 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,296 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,296 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,309 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,309 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,310 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,310 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,310 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,311 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,311 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,311 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,312 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,312 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,312 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,313 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,326 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,327 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,327 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,327 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,327 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,328 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,328 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,328 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,329 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,329 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,329 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,330 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,342 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,343 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,343 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,344 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,344 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,344 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,345 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,345 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,345 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,346 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,346 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,346 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,359 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,360 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,360 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,360 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,361 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,361 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,361 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,362 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,362 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,362 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,363 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,363 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,376 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,377 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,377 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,378 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,378 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,378 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,379 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,379 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,379 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,380 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,380 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,380 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,393 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,394 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,394 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,395 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,395 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,395 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,396 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,396 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,396 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,396 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,397 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,397 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,411 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,411 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,412 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,412 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,412 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,413 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,413 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,413 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,414 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,414 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,414 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,415 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,427 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,428 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,428 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,429 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,429 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,429 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,430 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,430 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,430 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,431 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,431 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,431 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,445 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,445 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,446 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,446 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,446 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,447 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,447 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,447 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,448 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,448 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,448 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,449 matplotlib.category INFO Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2023-01-05 16:54:11,456 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:11,801 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:11,801 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:12,656 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc5a14880>
2023-01-05 16:54:12,656 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc5a14880> on colorbar
2023-01-05 16:54:12,657 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,793 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,794 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:12,795 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Slanted' (lmmonoslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Math' (latinmodern-math.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,796 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-oblique.otf) oblique normal 600 condensed>) = 11.44
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,797 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,798 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-oblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Demi' (lmromandemi10-regular.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,799 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop' (lmmonoprop10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Unslanted' (lmromanunsl10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bolditalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,800 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Demi Cond' (lmsansdemicond10-regular.otf) normal normal 600 condensed>) = 10.44
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,801 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant8-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-01-05 16:54:12,802 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Dunhill' (lmromandunh10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans17-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,803 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Caps' (lmromancaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman7-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-boldoblique.otf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Caps' (lmmonocaps10-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans Quotation' (lmsansquot8-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman12-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman9-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,804 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Prop Light' (lmmonoproplt10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans9-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-oblique.otf) oblique normal 400 condensed>) = 11.25
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light' (lmmonolt10-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono Light Cond' (lmmonoltcond10-regular.otf) normal normal 400 condensed>) = 10.25
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman6-bold.otf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Sans' (lmsans12-oblique.otf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,805 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman' (lmroman5-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Roman Slanted' (lmromanslant10-regular.otf) normal normal 400 normal>) = 10.05
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Latin Modern Mono' (lmmono10-italic.otf) italic normal 400 normal>) = 11.05
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-05 16:54:12,806 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Sans ('/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-01-05 16:54:13,506 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:13,700 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:13,700 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:15,251 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc6ebbcd0>
2023-01-05 16:54:15,251 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc6ebbcd0> on colorbar
2023-01-05 16:54:15,251 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:54:16,70 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:16,263 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:16,264 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
2023-01-05 16:54:17,803 matplotlib.colorbar DEBUG locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc5c898e0>
2023-01-05 16:54:17,803 matplotlib.colorbar DEBUG Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efcc5c898e0> on colorbar
2023-01-05 16:54:17,803 matplotlib.colorbar DEBUG Setting pcolormesh
2023-01-05 16:54:18,438 matplotlib.backends.backend_pdf DEBUG Assigning font /b'F1' = '/home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2023-01-05 16:54:18,633 matplotlib.backends.backend_pdf DEBUG Embedding font /home/pis1901/PycharmProjects/envLN/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2023-01-05 16:54:18,633 matplotlib.backends.backend_pdf DEBUG Writing TrueType font.
